-- create table orders(oid int primary key auto_increment , itemname varchar(20))
/* This is for multline comment */
/*create table customers(cid int primary key,customername varchar(20),
address varchar(50),oid int ,
foreign key (oid) references orders(oid));*/

-- insert into orders values(11,'Mobile'),
-- (22,'Laptop'),
-- (33,'Mouse'),
-- (44,'LED'),
-- (55,'Speaker')

-- insert into customers values(101,'Rohit','Ranip',22),
-- (201,'Ronit','Bopal',55),
-- (411,'Ramesh','S G Highway',44),
-- (501,'Rina','Parimal',33),
-- (555,'Reena','Bopal',22),
-- (203,'Ram','Sabarmati',55),
-- (901,'Rekha','Ranip',44),
-- (1001,'Ashok','Bapunagar',22),
-- (304,'Dia','C G Road',44),
-- (331,'Ronak','Sabaramati',55),
-- (560,'Shivam','C G Road',22),
-- (401,'Manahar','Ranip',33)

select * from orders

__________________________________________

select address,customername from customers

__________________________________________

select address,customername from customers where address="Ranip"

___________________________________

select * from customers where address="ranip" and oid=22

_______________________________

select * from customers where address="ranip" or oid=22

_______________________________

select * from customers where address in("ranip","bapunagar","Sg highway")

_______________________________

select * from customers where oid between 30 and 50

_______________________________

select * from customers order by customername

_______________________________

select * from customers order by customername desc

_______________________________
select * from customers order by customername,oid

_______________________________

select * from customers order by customername,oid limit 2

_______________________________

select * from customers where customername like '%a'

____________________________________________________

select * from customers where customername like 'r____'

___________________________________________________________


select cid,customername , itemname from customers,orders
where customers.oid=orders.oid

___________________________________________________________

select cid,customername,itemname from customers inner join orders 
on customers.oid=orders.oid

___________________________________________________________

select cid,customername,itemname from customers left join orders 
on customers.oid=orders.oid


___________________________________________________________

joins , clause (where ,between , in ,order by,like,or-and)inheritance 

___________________________________________________________


select cid,customername,itemname as product_name from orders,customers where customers.oid=orders.oid

___________________________________________________________

alter table customers add  qty int
___________________________________________________________
aggregate function
sum,avg,min,max,count

___________________________________________________________

select itemname,sum(qty) from orders,customers where customers.oid=orders.oid group by itemname

___________________________________________________________

select itemname,sum(qty) from orders,customers where customers.oid=orders.oid group by itemname having sum(qty)>400

___________________________________________________________

select itemname,count(qty) from orders,customers where customers.oid=orders.oid group by itemname
s

___________________________________________________________


DELIMITER //
 
create procedure viewAllcustomers()
begin
select * from customers;
end // 

call viewAllcustomers()

___________________________________________________________

DELIMITER //
 
create procedure viewAllcustomersWithAddress(
in address1 varchar(20)

)
begin
select * from customers where address=address1;
end // 


call viewAllcustomersWithAddress('c g road')

___________________________________________________________

DELIMITER //
 DROP PROCEDURE IF EXISTS viewAllcustomersWithAddress; //

create procedure viewAllcustomersWithAddress(
in address1 varchar(20),
out total_cust int

)
begin
select count(*) into total_cust from customers where address=address1;
end // 


call viewAllcustomersWithAddress('c g road',@cust);
select @cust;

___________________________________________________________

View 

/*create view view_custumer_withItemName as 
select customername,qty,itemname from customers,orders 
where customers.oid=orders.oid*/

-- select * from view_custumer_withitemname
-- drop view view_custumer_withitemname;

________________________________________________________


 delimiter //
 create trigger qty_update1 after update on 
 customers for each row 
     begin
      update customers set qty=qty+908;
      end //


____________________________________________

DELIMITER //
create function sq_number(no1 int) 
returns int
NO SQL
begin
 declare num1 int;
 set num1 = no1*no1;
return num1;
end//
 
 
select sq_number(14) from dual;

____________________________________________


DELIMITER $$

CREATE PROCEDURE ProcessEmployees()
BEGIN
    -- Declare variables to hold fetched data
    DECLARE employee_id INT;
    DECLARE employee_name VARCHAR(100);
    DECLARE employee_salary DECIMAL(10, 2);
    DECLARE done INT DEFAULT FALSE;

    -- Declare the cursor
    DECLARE employee_cursor CURSOR FOR
        SELECT eid, ename, salary FROM employee;

    -- Declare a continue handler for NOT FOUND to exit the loop
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Open the cursor
    OPEN employee_cursor;

    -- Loop through the result set
    read_loop: LOOP
        -- Fetch the next row into variables
        FETCH employee_cursor INTO employee_id, employee_name, employee_salary;

        -- Exit the loop if no more rows are found
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Perform operations on each row (e.g., update salary)
        UPDATE employee
        SET salary = employee_salary * 1.10 -- Increase salary by 10%
        WHERE eid = employee_id;

    END LOOP;

    -- Close the cursor
    CLOSE employee_cursor;

END$$
DELIMITER ;
